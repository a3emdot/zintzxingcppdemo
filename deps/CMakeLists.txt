cmake_minimum_required(VERSION 3.18)

project(ZintZXingCppDemoDeps)

include(ExternalProject)

set(ZINT_REPO https://github.com/zint/zint.git)

set(ZINT_ARCHIVE_DIR https://github.com/zint/zint/archive)
set(ZINT_ARCHIVE_VERSION "2.13.0")
set(ZINT_ARCHIVE_FILE ${ZINT_ARCHIVE_DIR}/${ZINT_ARCHIVE_VERSION}.tar.gz)
set(ZINT_ARCHIVE_SHA256 "480d95e46d2a2dae204c0f2b6433f185aba50786a0f00d1420752a6e287311ec")

set(ZINT_LOCAL_DIR third-party/zint)
set(ZINT_LOCAL_FILE ${CMAKE_CURRENT_SOURCE_DIR}/distfiles/zint-${ZINT_ARCHIVE_VERSION}.tar.gz)
set(ZINT_LOCAL_SHA256 ${ZINT_ARCHIVE_SHA256})

#set(ZINT_PATCH0 zint-2.12.0-2e350232.diff)

set(ZINT_CMAKE_ARGS -DZINT_TEST:BOOL=OFF -DZINT_USE_QT:BOOL=OFF -DZINT_USE_PNG:BOOL=OFF)
if(BARCODE_LIBS_STATIC)
  set(ZINT_CMAKE_ARGS ${ZINT_CMAKE_ARGS} -DZINT_SHARED:BOOL=OFF -DZINT_STATIC:BOOL=ON)
endif()
if(FUZZER_MODE OR SANITIZE_MODE)
  set(ZINT_CMAKE_ARGS ${ZINT_CMAKE_ARGS} -DZINT_SANITIZE:BOOL=ON -DSANITIZERS=address)
endif()

if(UPSTREAM_MODE)
  ExternalProject_Add(
    zint-build
    SOURCE_DIR ${CMAKE_SOURCE_DIR}/${ZINT_LOCAL_DIR}
    BINARY_DIR ${CMAKE_BINARY_DIR}/${ZINT_LOCAL_DIR}
    STAMP_DIR ${CMAKE_BINARY_DIR}/${ZINT_LOCAL_DIR}/stamp
    DOWNLOAD_EXTRACT_TIMESTAMP "FALSE"
    GIT_REPOSITORY ${ZINT_REPO}
    CMAKE_ARGS -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE} -DCMAKE_INSTALL_PREFIX=${CMAKE_BINARY_DIR}/prefix ${ZINT_CMAKE_ARGS}
    TEST_COMMAND ""
  )
else()
  if(NOT EXISTS ${ZINT_LOCAL_FILE})
    file(DOWNLOAD ${ZINT_ARCHIVE_FILE} ${ZINT_LOCAL_FILE} SHOW_PROGRESS)
  endif()
  add_custom_target(zint-fetch DEPENDS ${ZINT_LOCAL_FILE})
  ExternalProject_Add(
    zint-build
    DEPENDS zint-fetch
    SOURCE_DIR ${CMAKE_SOURCE_DIR}/${ZINT_LOCAL_DIR}
    BINARY_DIR ${CMAKE_BINARY_DIR}/${ZINT_LOCAL_DIR}
    STAMP_DIR ${CMAKE_BINARY_DIR}/${ZINT_LOCAL_DIR}/stamp
    DOWNLOAD_EXTRACT_TIMESTAMP "FALSE"
    URL ${ZINT_LOCAL_FILE}
    URL_HASH SHA256=${ZINT_LOCAL_SHA256}
#    PATCH_COMMAND
#      git apply -p1 ${CMAKE_CURRENT_SOURCE_DIR}/${ZINT_PATCH0}
#    LOG_PATCH ON
    CMAKE_ARGS -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE} -DCMAKE_INSTALL_PREFIX=${CMAKE_BINARY_DIR}/prefix ${ZINT_CMAKE_ARGS}
    TEST_COMMAND ""
  )
endif()


set(ZXING_REPO https://github.com/zxing-cpp/zxing-cpp.git)

set(ZXING_ARCHIVE_DIR https://github.com/nu-book/zxing-cpp/archive)
set(ZXING_ARCHIVE_VERSION "2.2.1")
set(ZXING_ARCHIVE_FILE ${ZXING_ARCHIVE_DIR}/v${ZXING_ARCHIVE_VERSION}.tar.gz)
set(ZXING_ARCHIVE_SHA256 "02078ae15f19f9d423a441f205b1d1bee32349ddda7467e2c84e8f08876f8635")

set(ZXING_LOCAL_DIR third-party/zxing-cpp)
set(ZXING_LOCAL_FILE ${CMAKE_CURRENT_SOURCE_DIR}/distfiles/zxing-cpp-v${ZXING_ARCHIVE_VERSION}.tar.gz)
set(ZXING_LOCAL_SHA256 ${ZXING_ARCHIVE_SHA256})

#set(ZXING_PATCH0 zxing-cpp-2.0.0-9a36d24e.diff)

set(ZXING_CMAKE_ARGS -DBUILD_WRITERS:BOOL=OFF -DBUILD_EXAMPLES:BOOL=ON)
if(BARCODE_LIBS_STATIC)
  set(ZXING_CMAKE_ARGS ${ZXING_CMAKE_ARGS} -DBUILD_SHARED_LIBS:BOOL=OFF)
else()
  set(ZXING_CMAKE_ARGS ${ZXING_CMAKE_ARGS} -DBUILD_SHARED_LIBS:BOOL=ON)
endif()

if(UPSTREAM_MODE)
  ExternalProject_Add(
    zxing-build
    SOURCE_DIR ${CMAKE_SOURCE_DIR}/${ZXING_LOCAL_DIR}
    BINARY_DIR ${CMAKE_BINARY_DIR}/${ZXING_LOCAL_DIR}
    STAMP_DIR ${CMAKE_BINARY_DIR}/${ZXING_LOCAL_DIR}/stamp
    GIT_REPOSITORY ${ZXING_REPO}
    CMAKE_ARGS -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE} -DCMAKE_INSTALL_PREFIX=${CMAKE_BINARY_DIR}/prefix -DCMAKE_INSTALL_LIBDIR=lib ${ZXING_CMAKE_ARGS}
    TEST_COMMAND ""
  )
else()
  if(NOT EXISTS ${ZXING_LOCAL_FILE})
    file(DOWNLOAD ${ZXING_ARCHIVE_FILE} ${ZXING_LOCAL_FILE} SHOW_PROGRESS)
  endif()
  add_custom_target(zxing-fetch DEPENDS ${ZXING_LOCAL_FILE})
  ExternalProject_Add(
    zxing-build
    DEPENDS zxing-fetch
    SOURCE_DIR ${CMAKE_SOURCE_DIR}/${ZXING_LOCAL_DIR}
    BINARY_DIR ${CMAKE_BINARY_DIR}/${ZXING_LOCAL_DIR}
    STAMP_DIR ${CMAKE_BINARY_DIR}/${ZXING_LOCAL_DIR}/stamp
    DOWNLOAD_EXTRACT_TIMESTAMP "FALSE"
    URL ${ZXING_LOCAL_FILE}
    URL_HASH SHA256=${ZXING_LOCAL_SHA256}
#    PATCH_COMMAND
#      git apply -p1 ${CMAKE_CURRENT_SOURCE_DIR}/${ZXING_PATCH0}
#    LOG_PATCH ON
    CMAKE_ARGS -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE} -DCMAKE_INSTALL_PREFIX=${CMAKE_BINARY_DIR}/prefix -DCMAKE_INSTALL_LIBDIR=lib ${ZXING_CMAKE_ARGS}
    TEST_COMMAND ""
  )
endif()

